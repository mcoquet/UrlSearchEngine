version: '2'

services:
  databaseinit:
    build: ./DatabaseInit
    image: searchengine-databaseinit:0.0.2
    volumes:
      - "$PWD/DatabaseInit/dbinitstatus:/dbinitstatus"
    environment:
      COUCHDB_HOST: "couchdb"
    depends_on: 
      - couchdb
    networks:
      senetwork:
        aliases:
          - databaseinit

  ui:
    build: ./UI
    image: searchengine-ui:0.0.32
    #working_dir: /usr/src/app
    restart: always
    environment:
      DBPROXY_HOST: "dbproxy"
      DBPROXY_PORT: 8000
      PROXY: "http://dbproxy:8000"
    volumes:
      - "$PWD/UI/uicode:/usr/src/app"
    ports:
      - "8080:8080"
    depends_on: 
      - couchdb
      - dbproxy
    networks:
      senetwork:
        aliases:
          - ui

  uiproduction:
    image: nginx:latest
    restart: always
    environment:
      DBPROXY_HOST: "dbproxy"
      DBPROXY_PORT: 8000
      PROXY: "http://dbproxy:8000"
    volumes:
      - "$PWD/UI/uicode/build/:/usr/share/nginx/html:ro"
      - "$PWD/UI/uiconf/default.conf:/etc/nginx/conf.d/default.conf:ro"
    ports:
      - "80:80"
    depends_on: 
      - couchdb
      - dbproxy
    networks:
      senetwork:
        aliases:
          - ui

  getimagefromurl:
    build: ./GetImageFromURL
    image: searchengine-getimagefromurl:0.2.5
    restart: always
    volumes:
      - "$PWD/GetImageFromURL/tmp:/tmp"
    networks:
      senetwork:
        aliases:
          - getimagefromurl

  getcontentfromurl:
    build: ./GetContentFromURL
    image: searchengine-getcontentfromurl:0.0.7
    restart: always
    volumes:
      - "$PWD/GetContentFromURL/tmp:/tmp"
    networks:
      senetwork:
        aliases:
          - getcontentfromurl

  dbproxy:
    build: ./DBProxy
    image: searchengine-dbproxy:0.0.6
    restart: always
    environment:
      COUCHDB_HOST: "couchdb"
      COUCHDB_PORT: 5984
      IMAGE_HOST: "getimagefromurl"
      CONTENT_HOST: "getcontentfromurl"
    depends_on: 
      - couchdb
      - couchdb-lucene
      - getcontentfromurl
      - getimagefromurl
    networks:
      senetwork:
        aliases:
          - dbproxy

  couchdb:
    build:
      context: ./CouchDBLucene/
      dockerfile: ./Dockerfile-couchdb
    restart: always
    volumes:
      - "$PWD/CouchDBLucene/Data:/usr/local/var/lib/couchdb"
    networks:
      senetwork:
        aliases:
          - couchdb

  couchdb-lucene:
    image: klaemo/couchdb-lucene:latest
    restart: always
    networks:
      senetwork:
        aliases:
          - couchdb-lucene

networks:
  senetwork:
    driver: bridge
