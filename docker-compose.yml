version: '2'

services:
  databaseinit:
    build: ./DatabaseInit
    image: "searchengine-databaseinit:${DB_INIT_RELEASE_TAG}"
    volumes:
      - "$PWD/DatabaseInit/dbinitstatus:/dbinitstatus"
    environment:
      COUCHDB_HOST: "couchdb"
    depends_on: 
      - couchdb
    networks:
      senetwork:
        aliases:
          - databaseinit

  # UI service defined in docker-compose.production.yml [PRODUCTION]
  # UI service defined in docker-compose.override.yml [DEVELOPMENT]

  getimagefromurl:
    build: ./GetImageFromURL
    image: "searchengine-getimagefromurl:${GETIMAGEFROMURL_RELEASE_TAG}"
    restart: always
    volumes:
      - "$PWD/GetImageFromURL/tmp:/tmp"
    networks:
      senetwork:
        aliases:
          - getimagefromurl

  getcontentfromurl:
    build: ./GetContentFromURL
    image: "searchengine-getcontentfromurl:${GETCONTENTFROMURL_RELEASE_TAG}"
    restart: always
    volumes:
      - "$PWD/GetContentFromURL/tmp:/tmp"
    networks:
      senetwork:
        aliases:
          - getcontentfromurl

  dbproxy:
    build: ./DBProxy
    image: "searchengine-dbproxy:${DBPROXY_RELEASE_TAG}"
    restart: always
    environment:
      COUCHDB_HOST: "couchdb"
      COUCHDB_PORT: 5984
      IMAGE_HOST: "getimagefromurl"
      CONTENT_HOST: "getcontentfromurl"
    depends_on: 
      - couchdb
      - couchdb-lucene
      - getcontentfromurl
      - getimagefromurl
    networks:
      senetwork:
        aliases:
          - dbproxy

  couchdb:
    build:
      context: ./CouchDBLucene/
      dockerfile: ./Dockerfile-couchdb
    restart: always
    volumes:
      - "$PWD/CouchDBLucene/Data:/usr/local/var/lib/couchdb"
    networks:
      senetwork:
        aliases:
          - couchdb

  couchdb-lucene:
    image: klaemo/couchdb-lucene:latest
    restart: always
    networks:
      senetwork:
        aliases:
          - couchdb-lucene

networks:
  senetwork:
    driver: bridge
